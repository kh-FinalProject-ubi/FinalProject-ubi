<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="edu.kh.project.board.model.mapper.CommentMapper">

	<!-- 댓글 목록 조회 -->
	<select id="select" resultType="Comment">
		SELECT LEVEL,
		C.*
		FROM (
		SELECT
		C.COMMENT_NO,
		C.COMMENT_CONTENT,
		TO_CHAR(C.COMMENT_DATE, 'YYYY"."MM"."DD
		HH24":"MI') AS COMMENT_DATE,
		C.BOARD_NO,
		C.MEMBER_NO,
		M.MEMBER_NICKNAME,
		M.MEMBER_IMG,
		C.COMMENT_PARENT_NO,
		C.COMMENT_DEL_FL,

		-- 좋아요 수
		(SELECT
		COUNT(*)
		FROM COMMENT_LIKE CL
		WHERE CL.COMMENT_NO = C.COMMENT_NO) AS
		COMMENT_LIKE,

		-- 로그인한 회원의 좋아요 여부
		(SELECT COUNT(*)
		FROM COMMENT_LIKE CL
		WHERE CL.COMMENT_NO = C.COMMENT_NO
		AND CL.MEMBER_NO = #{memberNo}) AS
		COMMENT_LIKED

		FROM COMMENTS C
		JOIN
		MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		WHERE C.BOARD_NO = #{boardNo}
		) C
		WHERE C.COMMENT_DEL_FL = 'N'
		OR EXISTS
		(
		SELECT 1
		FROM COMMENTS SUB
		WHERE SUB.COMMENT_PARENT_NO = C.COMMENT_NO
		AND SUB.COMMENT_DEL_FL = 'N'
		)
		START WITH C.COMMENT_PARENT_NO IS NULL
		CONNECT BY PRIOR C.COMMENT_NO = C.COMMENT_PARENT_NO
		ORDER SIBLINGS BY
		C.COMMENT_NO
	</select>

	<!-- 동적 SQL : <if> 조건식을 작성할 수 있는 태그 - else 문 없음 - test 속성 : 조건식을 작성하는 속성 -->

	<!-- 댓글/자식 댓글 등록 -->
	<insert id="insert">
		INSERT INTO "COMMENTS"
		VALUES(SEQ_COMMENT_NO.NEXTVAL,
		#{commentContent},
		DEFAULT,
		DEFAULT,
		DEFAULT,
		#{boardNo},
		#{memberNo},

		<!-- 자식 댓글 -->
		<if test="commentParentNo != 0">
			#{commentParentNo},
		</if>

		<!-- 부모 댓글 -->
		<if test="commentParentNo == 0">
			NULL,
		</if>
		DEFAULT
		)
	</insert>

	<!-- 댓글 삭제 서비스 -->
	<update id="delete">
		UPDATE "COMMENTS" SET
		COMMENT_DEL_FL = 'Y'
		WHERE
		COMMENT_NO = #{commentNo}
	</update>

	<!-- 댓글 수정 서비스 -->
	<update id="update">
		UPDATE "COMMENTS" SET
		COMMENT_CONTENT =
		#{commentContent},
		COMMENT_UPDATE_DATE = SYSDATE
		WHERE COMMENT_NO =
		#{commentNo}
	</update>

	<!-- 좋아요 갯수 체크 -->
	<select id="checkCommentLike" resultType="_int">
		SELECT COUNT(*)
		FROM
		COMMENT_LIKE
		WHERE COMMENT_NO = #{commentNo}
		AND MEMBER_NO = #{memberNo}
	</select>

	<!-- 좋아요 추가 -->
	<insert id="insertCommentLike">
		INSERT INTO COMMENT_LIKE (COMMENT_NO, MEMBER_NO)
		VALUES (#{commentNo}, #{memberNo})
	</insert>

	<!-- 좋아요 삭제 -->
	<delete id="deleteCommentLike">
		DELETE FROM COMMENT_LIKE
		WHERE COMMENT_NO =
		#{commentNo}
		AND MEMBER_NO = #{memberNo}
	</delete>


	<!-- 신고 횟수 숫자 세기 -->
	<select id="checkReportCount" resultType="_int">
		SELECT COUNT(*)
		FROM
		REPORT
		WHERE TARGET_TYPE = 'COMMENT'
		AND TARGET_ID = #{commentNo}
		AND
		REPORTER_NO = #{memberNo}
		AND REPORT_STATUS = 'Y'
	</select>


	<!-- 답변 했다고 수정하는 메서드 -->
	<update id="updateBoardAnswer">
		UPDATE BOARD
		SET BOARD_ANSWER = #{boardAnswer}
		WHERE
		BOARD_NO = #{boardNo}
	</update>

	<!-- 모든 댓글 조회 메서드 -->
	<select id="selectCommentNo"
		resultType="edu.kh.project.board.model.dto.Comment">
		SELECT *
		FROM "COMMENTS"
		WHERE COMMENT_NO = #{commentNo}
	</select>

	<!-- 관리자가 단 댓글 확인 메서드 -->
	<select id="countAdminComments" resultType="int">
		SELECT COUNT(*)
		FROM
		COMMENTS C
		JOIN MEMBER M ON C.MEMBER_NO = M.MEMBER_NO
		WHERE C.BOARD_NO =
		#{boardNo}
		AND C.COMMENT_DEL_FL = 'N'
		AND M.AUTHORITY = '2'
	</select>

	<!-- REPORT 테이블에서 신고 내역 조회 -->
	<select id="checkCommentReportCount" resultType="_int">
		SELECT COUNT(*)
		FROM REPORT
		WHERE TARGET_TYPE = 'COMMENT'
		AND TARGET_ID = #{commentNo}
		AND REPORTER_NO = #{memberNo}
		AND REPORT_STATUS = 'Y'
	</select>

	<!-- 신고당할 댓글 작성자 번호 가져오기 -->
	<select id="selectCommentWriterNo" resultType="int">
		SELECT MEMBER_NO FROM COMMENTS WHERE COMMENT_NO = #{commentNo}
	</select>

	<!-- 2. REPORT 테이블에서 신고 추가 -->
	<insert id="insertCommentReport">
		INSERT INTO REPORT (
		TARGET_TYPE,
		TARGET_ID,
		REPORTER_NO,
		REPORT_STATUS,
		TARGET_MEMBER_NO
		)
		VALUES (
		'COMMENT',
		#{commentNo},
		#{memberNo},
		'Y',
		#{targetMemberNo}
		)
	</insert>

	<!-- 3. COMMENTS 테이블의 신고 수 +1 -->
	<update id="updateCommentReportCount">
		UPDATE COMMENTS
		SET COMMENT_REPORT_COUNT =
		COMMENT_REPORT_COUNT + 1
		WHERE COMMENT_NO = #{commentNo}
	</update>

	<!-- 4. REPORT 테이블에서 신고 취소 (soft delete) -->
	<update id="deleteCommentReport">
		UPDATE REPORT
		SET REPORT_STATUS = 'N'
		WHERE TARGET_TYPE
		= 'COMMENT'
		AND TARGET_ID = #{commentNo}
		AND REPORTER_NO = #{memberNo}
	</update>

	<!-- 5. COMMENTS 테이블의 신고 수 -1 -->
	<update id="decreaseCommentReportCount">
		UPDATE COMMENTS
		SET COMMENT_REPORT_COUNT = CASE
		WHEN
		COMMENT_REPORT_COUNT > 0 THEN COMMENT_REPORT_COUNT - 1
		ELSE 0
		END
		WHERE
		COMMENT_NO = #{commentNo}
	</update>


</mapper>
