<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.kh.project.board.model.mapper.BoardMapper">

	<!-- resultMap 태그 1.) 조회된 컬럼명과 DTO의 필드명이 일치하지 않을 때 매핑(연결) 시켜주는 역할 id 태그 
		: pk 역할을 하는 컬럼과 자바의 DTO 필드를 연결할 때 사용 result 태그 : 일반 컬럼과 자바의 DTO 필드 연결할 때 
		사용 2.) <collection> 태그를 추가 작성하여 여러 행 결과가 조회되는 다른 SELECT 를 수행한 후 그 결과를 지정된 
		DTO의 필드에 대입 type 속성 : 연결할 DTO 경로 또는 별칭 id 속성 : 해당 태그를 식별할 값(이름) -->

	<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO" />
		<result property="authority" column="AUTHORITY" />

		<!-- collection 태그 : SELECT 로 조회된 결과를 컬렉션(List)에 담아 지정된 필드에 세팅 property 
			: List 를 담을 DTO의 필드명 select : 실행할 select의 id column : 조회 결과 중 지정된 컬럼의 값을 
			파라미터로 전달 javaType: List(컬렉션)의 타입을 지정 ofType : List(컬렉션)의 제네릭(타입제한) 지정 -->

		<!-- 해당 게시글 이미지 목록 조회 후 필드에 저장 -->
		<collection property="imageList" select="selectImgList"
			column="BOARD_NO" javaType="java.util.ArrayList" ofType="boardImage" />

		<!-- 해당 게시글 댓글 목록 조회 후 필드에 저장 -->
		<collection property="commentList"
			select="selectCommentList" column="BOARD_NO"
			javaType="java.util.ArrayList" ofType="Comment" />

	</resultMap>

	<!-- 게시판 종류 조회 -->
	<select id="selectBoardTypeList">
		SELECT BOARD_CODE "boardCode", BOARD_NAME "boardName"
		FROM "BOARD_TYPE"
		ORDER BY BOARD_CODE
	</select>

	<!-- 게시글 수 조회 -->
	<select id="getListCount">
		SELECT COUNT(*)
		FROM "BOARD"
		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_TYPE = #{boardCode}
	</select>

	<!-- <![CDATA["문자열"]]> 해당 태그 내부에 작성된 문자열은 특수 기호(태그)로 해석하지 말고 문자 그대로 인식하라 
		(순수 문자 데이터임을 지정) -->

	<!-- 특정 게시판의 지정된 페이지 목록 조회 -->
	<select id="selectBoardList">
		SELECT BOARD_NO, BOARD_TITLE, BOARD_READ_COUNT, MEMBER_NICKNAME,
		POST_TYPE,
		BOARD_ANSWER,
		(SELECT COUNT(*)
		FROM "COMMENTS" C
		WHERE
		C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,

		(SELECT COUNT(*)
		FROM
		"BOARD_LIKE" L
		WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
	
	<![CDATA[
   	 CASE 
		WHEN SYSDATE - BOARD_DATE < 1 / 24 / 60
		THEN FLOOR((SYSDATE - BOARD_DATE) * 24 * 60 * 60) || '초 전'
		
		WHEN SYSDATE - BOARD_DATE < 1 / 24
		THEN FLOOR((SYSDATE - BOARD_DATE) * 24 * 60) || '분 전'
		
		WHEN SYSDATE - BOARD_DATE < 1
		THEN FLOOR((SYSDATE - BOARD_DATE) * 24) || '시간 전'
	
	 ELSE TO_CHAR(BOARD_DATE, 'YYYY-MM-DD')
 	 END BOARD_DATE
	]]>

		FROM "BOARD" B
		JOIN "MEMBER" M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE
		BOARD_DEL_FL = 'N'
		AND BOARD_TYPE = #{boardCode}
		ORDER BY BOARD_NO DESC
	</select>

	<!-- 게시글 상세 조회 -->
	<select id="selectOne" resultMap="board_rm">
		SELECT
		B.BOARD_NO,
		B.BOARD_TITLE,
		B.BOARD_CONTENT,
		B.BOARD_TYPE,
		B.BOARD_READ_COUNT,
		M.MEMBER_NO,
		M.MEMBER_NICKNAME,
		M.MEMBER_IMG,
		B.POST_TYPE,
		M.AUTHORITY,

		TO_CHAR(B.BOARD_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS BOARD_DATE,
		TO_CHAR(B.BOARD_UPDATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS
		BOARD_UPDATE,

		(SELECT COUNT(*)
		FROM BOARD_LIKE
		WHERE BOARD_NO =
		#{boardNo}) AS LIKE_COUNT,

		(SELECT IMAGE_PATH || IMAGE_NAME
		FROM
		BOARD_IMAGE
		WHERE BOARD_NO = #{boardNo}
		AND IMAGE_ORDER = 0) AS
		THUMBNAIL,

		(SELECT COUNT(*)
		FROM BOARD_LIKE
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}) AS LIKE_CHECK

		FROM BOARD B
		JOIN MEMBER M ON
		B.MEMBER_NO = M.MEMBER_NO

		WHERE B.BOARD_DEL_FL = 'N'
		AND B.BOARD_NO =
		#{boardNo}
		AND B.BOARD_TYPE = #{boardCode}
	</select>

	<!-- 상세 조회한 게시글의 이미지 목록 조회 -->
	<select id="selectImgList" resultType="BoardImage">
		SELECT * FROM
		"BOARD_IMAGE"
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMAGE_ORDER
	</select>

	<!-- 상세 조회한 게시글의 댓글 목록 조회 -->
	<select id="selectCommentList" resultType="Comment">
		SELECT LEVEL,
		C.*
		FROM (
		SELECT C.COMMENT_NO,
		C.COMMENT_CONTENT,
		TO_CHAR(C.COMMENT_DATE,
		'YYYY"."MM"."DD HH24":"MI') AS COMMENT_DATE,
		C.BOARD_NO,
		C.MEMBER_NO,
		M.MEMBER_NICKNAME,
		M.MEMBER_IMG,
		C.COMMENT_PARENT_NO,
		C.COMMENT_DEL_FL,
		(SELECT COUNT(*)
		FROM COMMENT_LIKE CL
		WHERE CL.COMMENT_NO =
		C.COMMENT_NO) AS COMMENT_LIKE
		FROM COMMENTS C
		JOIN MEMBER M ON
		C.MEMBER_NO = M.MEMBER_NO
		WHERE C.BOARD_NO = #{boardNo}
		) C
		WHERE
		C.COMMENT_DEL_FL = 'N'
		OR EXISTS (
		SELECT 1
		FROM COMMENTS SUB
		WHERE
		SUB.COMMENT_PARENT_NO = C.COMMENT_NO
		AND SUB.COMMENT_DEL_FL = 'N'
		)
		START WITH C.COMMENT_PARENT_NO IS NULL
		CONNECT BY PRIOR C.COMMENT_NO =
		C.COMMENT_PARENT_NO
		ORDER SIBLINGS BY C.COMMENT_NO
	</select>
	
	<!-- 게시글 번호로 작성자 회원 번호 조회 -->
    <select id="selectWriterNo" resultType="int">
        SELECT MEMBER_NO
        FROM BOARD
        WHERE BOARD_NO = #{boardNo}
    </select>


	<!-- 좋아요 해제 -->
	<delete id="deleteBoardLike">
		DELETE FROM "BOARD_LIKE"
		WHERE MEMBER_NO = #{memberNo}
		AND BOARD_NO = #{boardNo}
	</delete>

	<!-- 좋아요 체크 -->
	<insert id="insertBoardLike">
		INSERT INTO "BOARD_LIKE"
		VALUES(#{memberNo},
		#{boardNo})
	</insert>

	<!-- 게시글 돟아요 수 조회 -->
	<select id="selectLikeCount">
		SELECT COUNT (*) FROM "BOARD_LIKE"
		WHERE BOARD_NO =
		#{boardNo}
	</select>

	<!-- 조회 수 1 증가 -->
	<update id="updateReadCount">
		UPDATE "BOARD" SET
		BOARD_READ_COUNT = BOARD_READ_COUNT
		+ 1
		WHERE BOARD_NO = #{boardNo}
	</update>

	<!-- 조회 수 조회 -->
	<select id="selectReadCount">
		SELECT BOARD_READ_COUNT
		FROM "BOARD"
		WHERE BOARD_NO =
		#{boardNo}
	</select>

	<!-- 동적 SQL : <choose> <when> <otherwise> <choose> : 조건문을 작성할 영역 지정 내부에 
		<when> <otherwise> 태그 작성 가능 <when> : if, else if 역할의 태그 - test 속성 : 조건식 작성하는 
		속성 <otherwise> : else 역할의 태그 -->

	<!-- 검색 조건이 맞는 게시글 수 조회 -->
	<select id="getSearchCount">
		SELECT COUNT(*)
		FROM "BOARD"

		<!-- 작성자 검색인 경우 -->
		<if test='key == "w"'>
			JOIN "MEMBER" USING(MEMBER_NO)
		</if>

		WHERE BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}

		<choose>
			<!-- 제목 검색 (key 값 "t"인 경우) -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%'|| #{query} ||'%'
			</when>

			<!-- 내용 검색 (key 값 "c"인 경우) -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%'|| #{query} ||'%'
			</when>

			<!-- 제목 + 내용 검색 (key 값 "tc"인 경우) -->
			<when test='key == "tc"'>
				AND (
				BOARD_TITLE LIKE '%'|| #{query} ||'%'
				OR
				BOARD_CONTENT LIKE '%'||
				#{query} ||'%'
				)
			</when>

			<!-- 작성자 검색 (key 값 "w"인 경우) -->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%'|| #{query} ||'%'
			</when>
		</choose>
	</select>

	<select id="selectSearchList">
		SELECT BOARD_NO, BOARD_TITLE, READ_COUNT, MEMBER_NICKNAME,
		(SELECT
		COUNT(*)
		FROM "COMMENT" C
		WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,

		(SELECT COUNT(*)
		FROM "BOARD_LIKE" L
		WHERE L.BOARD_NO = B.BOARD_NO)
		LIKE_COUNT,
	
	<![CDATA[
   	 CASE 
		WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60
		THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60 * 60) || '초 전'
		
		WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
		THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24 * 60) || '분 전'
		
		WHEN SYSDATE - BOARD_WRITE_DATE < 1
		THEN FLOOR((SYSDATE - BOARD_WRITE_DATE) * 24) || '시간 전'
	
	 ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
 	 END BOARD_WRITE_DATE
	]]>

		FROM "BOARD" B
		JOIN "MEMBER" M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE
		BOARD_DEL_FL = 'N'
		AND BOARD_CODE = #{boardCode}
		<choose>
			<!-- 제목 검색 (key 값 "t"인 경우) -->
			<when test='key == "t"'>
				AND BOARD_TITLE LIKE '%'|| #{query} ||'%'
			</when>

			<!-- 내용 검색 (key 값 "c"인 경우) -->
			<when test='key == "c"'>
				AND BOARD_CONTENT LIKE '%'|| #{query} ||'%'
			</when>

			<!-- 제목 + 내용 검색 (key 값 "tc"인 경우) -->
			<when test='key == "tc"'>
				AND (
				BOARD_TITLE LIKE '%'|| #{query} ||'%'
				OR
				BOARD_CONTENT LIKE '%'||
				#{query} ||'%'
				)
			</when>

			<!-- 작성자 검색 (key 값 "w"인 경우) -->
			<when test='key == "w"'>
				AND MEMBER_NICKNAME LIKE '%'|| #{query} ||'%'
			</when>
		</choose>
		ORDER BY BOARD_NO DESC
	</select>

	<select id="selectDBImageList">
		SELECT SUBSTR(PROFILE_IMG,
		INSTR(PROFILE_IMG, '/', -1)
		+ 1) AS "rename"
		FROM "MEMBER"
		WHERE PROFILE_IMG IS NOT NULL
		UNION
		SELECT
		CAST(IMG_RENAME AS VARCHAR2(300)) "rename"
		FROM "BOARD_IMG"
	</select>

</mapper>
